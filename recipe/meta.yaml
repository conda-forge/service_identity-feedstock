{% set version = "24.2.0" %}

# handle undefined PYTHON in `noarch: generic` outputs
{% if PYTHON is not defined %}{% set PYTHON = "$PYTHON" %}{% endif %}

package:
  name: service-identity
  version: {{ version }}

source:
  url: https://pypi.org/packages/source/s/service-identity/service_identity-{{ version }}.tar.gz
  sha256: b8683ba13f0d39c6cd5d625d2c5f65421d6d707b013b375c355751557cbe8e09

build:
  number: 1
  noarch: python
  script: {{ PYTHON }} -m pip install . -vv --no-deps --no-build-isolation

requirements:
  build:
    - python                                 # [build_platform != target_platform]
    - cross-python_{{ target_platform }}     # [build_platform != target_platform]
  host:
    - hatch-fancy-pypi-readme
    - hatch-vcs
    - hatchling
    - pip
    - python {{ python_min }}
  run:
    - attrs >=19.1.0
    - cryptography
    - pyasn1
    - pyasn1-modules
    - python >={{ python_min }}
  run_constrained:
    - {{ pin_subpackage("service_identity", max_pin="x.x.x") }}

test:
  requires:
    - pip
    - python {{ python_min }}
  imports:
    - service_identity
  commands:
    - pip check

outputs:
  - name: service-identity

  - name: service_identity
    build:
      noarch: generic
    requirements:
      run:
        - {{ pin_subpackage("service-identity", max_pin="x.x.x") }}
    test:
      imports:
        - service_identity

  - name: service-identity-with-pyopenssl
    build:
      noarch: generic
    requirements:
      run:
        - {{ pin_subpackage("service-identity", max_pin="x.x.x") }}
        - pyopenssl
    test:
      imports:
        - service_identity

  - name: service-identity-with-idna
    build:
      noarch: generic
    requirements:
      run:
        - {{ pin_subpackage("service-identity", max_pin="x.x.x") }}
        - idna
    test:
      imports:
        - service_identity

  - name: service-identity-with-all
    build:
      noarch: generic
    requirements:
      run:
        - {{ pin_subpackage("service-identity", max_pin="x.x.x") }}
        - {{ pin_subpackage("service-identity-with-idna", max_pin="x.x.x") }}
        - {{ pin_subpackage("service-identity-with-pyopenssl", max_pin="x.x.x") }}
    test:
      source_files:
        - tests
      requires:
        - coverage
        - pip
        - pytest
      imports:
        - service_identity
      commands:
        - pip check
        - coverage run --source=service_identity --branch -m pytest -vv --tb=long --color=yes
        - coverage report --show-missing --skip-covered --fail-under=98

about:
  home: https://github.com/pyca/service-identity
  license: MIT
  license_family: MIT
  license_file: LICENSE
  summary: Service identity verification for pyOpenSSL.
  description: |
    service_identity aspires to give you all the tools you need for verifying
    whether a certificate is valid for the intended purposes.
  doc_url: https://service-identity.readthedocs.io/en/stable/
  dev_url: https://github.com/pyca/service-identity

extra:
  feedstock-name: service_identity
  recipe-maintainers:
    - isuruf
    - bollwyvl
